// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as cloudmemcacheModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (instance.constructor as typeof protobuf.Message).toObject(
    instance as protobuf.Message<T>,
    {defaults: true}
  );
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta2.CloudMemcacheClient', () => {
  it('has servicePath', () => {
    const servicePath =
      cloudmemcacheModule.v1beta2.CloudMemcacheClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint =
      cloudmemcacheModule.v1beta2.CloudMemcacheClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = cloudmemcacheModule.v1beta2.CloudMemcacheClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.cloudMemcacheStub, undefined);
    await client.initialize();
    assert(client.cloudMemcacheStub);
  });

  it('has close method', () => {
    const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('getInstance', () => {
    it('invokes getInstance without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.GetInstanceRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.Instance()
      );
      client.innerApiCalls.getInstance = stubSimpleCall(expectedResponse);
      const [response] = await client.getInstance(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getInstance without error using callback', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.GetInstanceRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.Instance()
      );
      client.innerApiCalls.getInstance = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.getInstance(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.memcache.v1beta2.IInstance | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getInstance with error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.GetInstanceRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getInstance = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.getInstance(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.getInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createInstance', () => {
    it('invokes createInstance without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.CreateInstanceRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createInstance = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.createInstance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createInstance without error using callback', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.CreateInstanceRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createInstance = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createInstance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.memcache.v1beta2.IInstance,
              protos.google.cloud.memcache.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.memcache.v1beta2.IInstance,
        protos.google.cloud.memcache.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createInstance with call error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.CreateInstanceRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createInstance = stubLongRunningCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.createInstance(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createInstance with LRO error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.CreateInstanceRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createInstance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createInstance(request);
      assert.rejects(async () => {
        await operation.promise();
      }, expectedError);
      assert(
        (client.innerApiCalls.createInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateInstance', () => {
    it('invokes updateInstance without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateInstanceRequest()
      );
      request.resource = {};
      request.resource.name = '';
      const expectedHeaderRequestParams = 'resource.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateInstance = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.updateInstance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateInstance without error using callback', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateInstanceRequest()
      );
      request.resource = {};
      request.resource.name = '';
      const expectedHeaderRequestParams = 'resource.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateInstance = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateInstance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.memcache.v1beta2.IInstance,
              protos.google.cloud.memcache.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.memcache.v1beta2.IInstance,
        protos.google.cloud.memcache.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateInstance with call error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateInstanceRequest()
      );
      request.resource = {};
      request.resource.name = '';
      const expectedHeaderRequestParams = 'resource.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateInstance = stubLongRunningCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.updateInstance(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.updateInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateInstance with LRO error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateInstanceRequest()
      );
      request.resource = {};
      request.resource.name = '';
      const expectedHeaderRequestParams = 'resource.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateInstance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateInstance(request);
      assert.rejects(async () => {
        await operation.promise();
      }, expectedError);
      assert(
        (client.innerApiCalls.updateInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateParameters', () => {
    it('invokes updateParameters without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateParameters = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.updateParameters(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateParameters without error using callback', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateParameters = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateParameters(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.memcache.v1beta2.IInstance,
              protos.google.cloud.memcache.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.memcache.v1beta2.IInstance,
        protos.google.cloud.memcache.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateParameters with call error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateParameters = stubLongRunningCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.updateParameters(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.updateParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateParameters with LRO error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.UpdateParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateParameters = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateParameters(request);
      assert.rejects(async () => {
        await operation.promise();
      }, expectedError);
      assert(
        (client.innerApiCalls.updateParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('deleteInstance', () => {
    it('invokes deleteInstance without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.DeleteInstanceRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteInstance = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.deleteInstance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteInstance without error using callback', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.DeleteInstanceRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteInstance = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.deleteInstance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.memcache.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.memcache.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteInstance with call error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.DeleteInstanceRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteInstance = stubLongRunningCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.deleteInstance(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.deleteInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteInstance with LRO error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.DeleteInstanceRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteInstance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteInstance(request);
      assert.rejects(async () => {
        await operation.promise();
      }, expectedError);
      assert(
        (client.innerApiCalls.deleteInstance as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('applyParameters', () => {
    it('invokes applyParameters without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ApplyParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.applyParameters = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.applyParameters(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.applyParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes applyParameters without error using callback', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ApplyParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.applyParameters = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.applyParameters(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.memcache.v1beta2.IInstance,
              protos.google.cloud.memcache.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.memcache.v1beta2.IInstance,
        protos.google.cloud.memcache.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.applyParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes applyParameters with call error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ApplyParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.applyParameters = stubLongRunningCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.applyParameters(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.applyParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes applyParameters with LRO error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ApplyParametersRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.applyParameters = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.applyParameters(request);
      assert.rejects(async () => {
        await operation.promise();
      }, expectedError);
      assert(
        (client.innerApiCalls.applyParameters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('listInstances', () => {
    it('invokes listInstances without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ListInstancesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
      ];
      client.innerApiCalls.listInstances = stubSimpleCall(expectedResponse);
      const [response] = await client.listInstances(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listInstances as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listInstances without error using callback', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ListInstancesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
      ];
      client.innerApiCalls.listInstances = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listInstances(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.memcache.v1beta2.IInstance[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listInstances as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listInstances with error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ListInstancesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listInstances = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.listInstances(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.listInstances as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listInstancesStream without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ListInstancesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
      ];
      client.descriptors.page.listInstances.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listInstancesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.memcache.v1beta2.Instance[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.memcache.v1beta2.Instance) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listInstances.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInstances, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listInstances
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes listInstancesStream with error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ListInstancesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listInstances.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listInstancesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.memcache.v1beta2.Instance[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.memcache.v1beta2.Instance) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.listInstances.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInstances, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listInstances
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listInstances without error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ListInstancesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.memcache.v1beta2.Instance()
        ),
      ];
      client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.memcache.v1beta2.IInstance[] = [];
      const iterable = client.listInstancesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listInstances
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listInstances
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listInstances with error', async () => {
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.memcache.v1beta2.ListInstancesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listInstancesAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.memcache.v1beta2.IInstance[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listInstances
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listInstances
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('instance', () => {
      const fakePath = '/rendered/path/instance';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        instance: 'instanceValue',
      };
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.instancePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.instancePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('instancePath', () => {
        const result = client.instancePath(
          'projectValue',
          'locationValue',
          'instanceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.instancePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromInstanceName', () => {
        const result = client.matchProjectFromInstanceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromInstanceName', () => {
        const result = client.matchLocationFromInstanceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromInstanceName', () => {
        const result = client.matchInstanceFromInstanceName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new cloudmemcacheModule.v1beta2.CloudMemcacheClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
